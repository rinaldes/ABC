wb = xlsx_package.workbook
styles = wb.styles
default = styles.add_style(:border => Axlsx::STYLE_THIN_BORDER)
subjudul = styles.add_style(:b => true, :border => Axlsx::STYLE_THIN_BORDER)
subjudul_biru_tengah = styles.add_style(:b => true, :alignment => { :horizontal => :center, :vertical => :center, :wrap_text => true}, :bg_color => "307cf4", :border => Axlsx::STYLE_THIN_BORDER)
subjudul_biru = styles.add_style(:b => true, :bg_color => "307cf4", :border => Axlsx::STYLE_THIN_BORDER)
judul = styles.add_style(:b => true, :sz => 14, :alignment => { :horizontal => :center, :wrap_text => true})
grand_total = []
alp = {}
('A'..'ZZZ').each_with_index do |alpha, i|
  alp[i] = alpha
end

wb.add_worksheet(name: "Azzurra ke ABC") do |sheet|
  sheet.add_row [nil]
  sheet.add_row [nil]
  sheet.add_row [nil]
  img = File.expand_path(Rails.root+'public/img/logo_nuansabaru.png')
  sheet.add_image(:image_src => img, :end_at => true) do |image|
    image.start_at 0, 0
    image.end_at 2, 2
  end
  sheet.merge_cells "A4:G4"
  (0..3).each do |mrge|
    sheet.merge_cells "#{alp[mrge]}6:#{alp[mrge]}7"
  end
  sheet.merge_cells "#{alp[5]}6:#{alp[5]}7"
  sheet.add_row ["Pengiriman Azzurra ke ABC".upcase], :style => judul, :widths=>[:ignore]
  sheet.add_row [nil]
  sheet.add_row ["Tanggal Bon", "No Form", "QTY", "Nominal", "", "Barang Yang Diterima", "Total"], :style => subjudul_biru_tengah
  sheet.add_row ["", "", "", "Qty", "Nominal Selisih", "", "Nominal"], :style => subjudul_biru_tengah

  a, total_quantity, total_sup_quantity, total_value, total_value2 = 8, 0, 0, 0 ,0
  @azzurra_ke_abc.each do |retur|
    nom_slsh = (retur.supplier_qty.to_i * retur.value.to_f)
    total_value += retur.value.to_i
    total_value2 += nom_slsh
    total_quantity += retur.quantity.to_i
    total_sup_quantity += retur.supplier_qty.to_i
    sheet.add_row [retur.receiving.date, retur.receiving.number, retur.quantity, retur.total_price, retur.supplier_qty, nom_slsh - retur.total_price.to_f, nom_slsh]
    a += 1
  end
  bulan = (Date::MONTHNAMES[params[:month].present? ? params[:month].to_i : Time.now.month]) + " " + (params[:year].present? ? params[:year] : Time.now.year)
  sheet.add_row ["Total Barang " + bulan, "", "", total_value, "Total Barang " + bulan, "", total_value2], style: subjudul_biru_tengah, widths: [:ignore]
  sheet.add_row [@azzurra_bon.count.to_s + " Bon " + total_quantity.to_s, "", "", "", @azzurra_bon.count.to_s + " Bon " + total_sup_quantity.to_s, ""], style: subjudul_biru_tengah, widths: [:ignore]
  sheet.merge_cells "A#{a}:C#{a}"
  sheet.merge_cells "A#{a+1}:C#{a+1}"
  sheet.merge_cells "E#{a}:F#{a}"
  sheet.merge_cells "E#{a+1}:F#{a+1}"
  sheet.merge_cells "D#{a}:D#{a+1}"
  sheet.merge_cells "G#{a}:G#{a+1}"

  #Retur
  a += 4
  sheet.add_row [nil]
  sheet.add_row [nil]
  sheet.merge_cells "A#{a}:F#{a}"
  sheet.add_row ["Retur Azzurra ke ABC".upcase], :style => judul, :widths=>[:ignore]
  sheet.add_row [nil]
  sheet.add_row ["Tanggal Terima", "Tanggal Bon", "No Form", "Kode", "QTY", "Nominal"], :style => subjudul_biru_tengah
  a += 3

  total_quantity, total_value = 0, 0
  @r_azzurra_ke_abc.each do |retur|
    total_value += retur.value.to_i
    total_quantity += retur.quantity.to_i
    sheet.add_row [retur.product_mutation.received_date, retur.product_mutation.mutation_date, retur.product_mutation.code, retur.product_size.product.article + " " +retur.product_size.product.colour.name + " " +retur.product_size.size_detail.size_number, retur.quantity, retur.value]
    a += 1
  end
  bulan = (Date::MONTHNAMES[params[:month].present? ? params[:month].to_i : Time.now.month]) + " " + (params[:year].present? ? params[:year] : Time.now.year)
  sheet.add_row ["Total Retur Barang " + bulan, "", "", "", total_quantity, total_value], style: subjudul_biru_tengah, widths: [:ignore]
  sheet.merge_cells "A#{a}:D#{a}"
end

wb.add_worksheet(name: "ABC ke Azzurra") do |sheet|
  sheet.add_row [nil]
  sheet.add_row [nil]
  sheet.add_row [nil]
  img = File.expand_path(Rails.root+'public/img/logo_nuansabaru.png')
  sheet.add_image(:image_src => img, :end_at => true) do |image|
    image.start_at 0, 0
    image.end_at 2, 2
  end
  sheet.merge_cells "A4:G4"
  sheet.add_row ["Pengiriman ABC ke Azzurra".upcase], :style => judul, :widths=>[:ignore]
  sheet.add_row [nil]
  sheet.add_row ["Tanggal Bon", "No", "QTY", "Nominal", "Keterangan", "Ongkos Kirim"], :style => subjudul_biru_tengah

  a, total_quantity, total_value, total_ongkir = 7, 0, 0, 0
  @abc_ke_azzurra.each do |retur|
    total_value += retur.total_value.to_i
    total_ongkir += retur.ongkir.to_i
    total_quantity += retur.total_quantity.to_i
    sheet.add_row [retur.mutation_date, retur.code, retur.total_quantity, retur.total_value, retur.note, retur.ongkir]
    a += 1
  end
  bulan = (Date::MONTHNAMES[params[:month].present? ? params[:month].to_i : Time.now.month]) + " " + (params[:year].present? ? params[:year] : Time.now.year)
  sheet.add_row ["Total Barang " + bulan, "", "", total_value, "Total Ongkir", total_ongkir], style: subjudul_biru_tengah, widths: [:ignore]
  sheet.add_row [total_quantity.to_s + " PCS/PSG "], style: subjudul_biru_tengah, widths: [:ignore]
  sheet.merge_cells "A#{a}:C#{a}"
  sheet.merge_cells "A#{a+1}:C#{a+1}"
  sheet.merge_cells "D#{a}:D#{a+1}"
  sheet.merge_cells "E#{a}:E#{a+1}"
  sheet.merge_cells "F#{a}:F#{a+1}"

  #Retur
  a += 4
  sheet.add_row [nil]
  sheet.add_row [nil]
  sheet.merge_cells "A#{a}:F#{a}"
  sheet.add_row ["Retur ABC ke Azzurra".upcase], :style => judul, :widths=>[:ignore]
  sheet.add_row [nil]
  sheet.add_row ["Tanggal", "No Form", "Kode", "QTY", "Nominal", "Ongkos Kirim", "Keterangan"], :style => subjudul_biru_tengah
  a += 3

  total_quantity, total_value, total_ongkir, rts_no = 0, 0, 0, 0
  @r_abc_ke_azzurra.each do |retur|
    total_value += retur.total.to_i
    total_quantity += retur.quantity.to_i 
    total_ongkir += retur.returns_to_supplier.ongkir.to_i if rts_no != retur.returns_to_supplier_id
    sheet.add_row [retur.returns_to_supplier.date, retur.returns_to_supplier.receive_no, retur.product_size.product.article + " " + retur.product_size.product.colour.name + " " + retur.product_size.size_detail.size_number, retur.quantity, retur.total, retur.returns_to_supplier.ongkir, retur.returns_to_supplier.note]
    a += 1
  end
  bulan = (Date::MONTHNAMES[params[:month].present? ? params[:month].to_i : Time.now.month]) + " " + (params[:year].present? ? params[:year] : Time.now.year)
  sheet.add_row ["Total Retur Barang " + bulan, "", "", "", total_value, total_ongkir, ""], style: subjudul_biru_tengah, widths: [:ignore]
  sheet.add_row [total_quantity.to_s + " PCS/PSG "], style: subjudul_biru_tengah, widths: [:ignore]
  sheet.merge_cells "A#{a}:D#{a}"
  sheet.merge_cells "A#{a+1}:D#{a+1}"
  sheet.merge_cells "E#{a}:E#{a+1}"
  sheet.merge_cells "F#{a}:F#{a+1}"
  sheet.merge_cells "G#{a}:G#{a+1}"
end

wb.add_worksheet(name: "BO Azzurra") do |sheet|
  sheet.add_row [nil]
  sheet.add_row [nil]
  sheet.add_row [nil]
  img = File.expand_path(Rails.root+'public/img/logo_nuansabaru.png')
  sheet.add_image(:image_src => img, :end_at => true) do |image|
    image.start_at 0, 0
    image.end_at 2, 2
  end
  sheet.merge_cells "A4:I4"
  sheet.merge_cells "A6:A7"
  (1..3).each do |mrge|
    sheet.merge_cells "#{alp[mrge*2-1]}6:#{alp[mrge*2]}6"
  end
  sheet.add_row ["ABC Ke Azzurra".upcase], :style => judul, :widths=>[:ignore]
  sheet.add_row [nil]
  sheet.add_row ["Bulan", "Kiriman Barang", "", "Return", "", "Total", "", "Ongkos Kirim", "Total + Ongkir"], :style => subjudul_biru_tengah
  sheet.add_row ["", "Qty", "Nominal", "Qty", "Nominal", "Qty", "Nominal", "Nominal", "Nominal"], :style => subjudul_biru_tengah

  a, total, totalnya = 0, [0,0,0,0,0,0,0,0], []
  until a > 11 do
    month = (Time.now.beginning_of_year + a.month)
    date = ((params[:year].present? ? params[:year] : Time.now.year.to_s) + '-' + (month.strftime("%m")) + '-01').to_time
    conditions, conditions2 = [], []
    conditions << "date BETWEEN '#{date}' AND  '#{date + 1.month}'"
    conditions2 << "mutation_date BETWEEN '#{date}' AND  '#{date + 1.month}'"
    bo_abc = PurchaseTransfer.where(conditions2.join(' AND ')).where("product_mutations.destination_warehouse_id = #{6}")
    bo_r_abc = ReturnsToSupplier.joins(:supplier).where(conditions.join(' AND ')).where("lower(suppliers.name) like '%azzurra%'")
    total_qty = bo_abc.map(&:total_quantity).first.to_i + bo_r_abc.map(&:quantity).first.to_i
    total_nom = bo_abc.map(&:total_value).first.to_f + bo_r_abc.map(&:total).first.to_f
    total_ongkir = bo_abc.map(&:ongkir).first.to_f + bo_r_abc.map(&:ongkir).first.to_f
    sheet.add_row [month.strftime("%b"), bo_abc.map(&:total_quantity).first.to_i, bo_abc.map(&:total_value).first.to_f, bo_r_abc.map(&:quantity).first.to_i, bo_r_abc.map(&:total).first.to_f, total_qty, total_nom, total_ongkir, total_ongkir + total_nom]
    a += 1
    total[0] += bo_abc.map(&:total_quantity).first.to_i
    total[1] += bo_abc.map(&:total_value).first.to_f
    total[2] += bo_r_abc.map(&:quantity).first.to_i
    total[3] += bo_r_abc.map(&:total).first.to_f
    total[4] += total_qty
    total[5] += total_nom
    total[6] += total_ongkir
    total[7] += total_ongkir + total_nom
  end
  (0..7).each do |ttl|
    totalnya << total[ttl]
  end
  sheet.add_row ["Total"] + totalnya, style: subjudul_biru_tengah, widths: [:ignore]

  #azzurra ke abc
  sheet.add_row [nil]
  sheet.add_row [nil]
  b = 23
  sheet.merge_cells "A#{b}:I#{b}"
  sheet.merge_cells "A#{b+2}:A#{b+3}"
  (1..3).each do |mrge|
    sheet.merge_cells "#{alp[mrge*2-1]}#{b+2}:#{alp[mrge*2]}#{b+2}"
  end
  sheet.add_row ["Azzurra ke ABC".upcase], :style => judul, :widths=>[:ignore]
  sheet.add_row [nil]
  sheet.add_row ["Bulan", "Kiriman Barang", "", "Return", "", "Total", "", "Ongkos Kirim", "Total + Ongkir"], :style => subjudul_biru_tengah
  sheet.add_row ["", "Qty", "Nominal", "Qty", "Nominal", "Qty", "Nominal", "Nominal", "Nominal"], :style => subjudul_biru_tengah

  a, total, totalnya = 0, [0,0,0,0,0,0,0,0], []
  until a > 11 do
    month = (Time.now.beginning_of_year + a.month)
    date = ((params[:year].present? ? params[:year] : Time.now.year.to_s) + '-' + (month.strftime("%m")) + '-01').to_time
    conditions, conditions2 = [], []
    conditions << "date BETWEEN '#{date}' AND  '#{date + 1.month}'"
    conditions2 << "mutation_date BETWEEN '#{date}' AND  '#{date + 1.month}'"
    bo_abc = ReturnsToHo.where(conditions2.join(' AND ')).where("origin_warehouse_id = #{6}")
    bo_r_abc = Receiving.joins(:supplier).where(conditions.join(' AND ')).where("lower(suppliers.name) like '%azzurra%'")
    total_qty = bo_abc.map(&:total_quantity).first.to_i + bo_r_abc.map(&:received_qty).first.to_i
    total_nom = bo_abc.map(&:total_value).first.to_f + bo_r_abc.map(&:total_before_discount).first.to_f
    total_ongkir = bo_abc.map(&:ongkir).first.to_f + (bo_r_abc.map(&:ongkir).first.to_f rescue 0)
    sheet.add_row [month.strftime("%b"), bo_r_abc.map(&:received_qty).first.to_i, bo_r_abc.map(&:total_before_discount).first.to_f, bo_abc.map(&:total_quantity).first.to_i, bo_abc.map(&:total_value).first.to_f, total_qty, total_nom, total_ongkir, total_ongkir + total_nom]
    a += 1
    total[0] += bo_r_abc.map(&:received_qty).first.to_i
    total[1] += bo_r_abc.map(&:total_before_discount).first.to_f
    total[2] += bo_abc.map(&:total_quantity).first.to_i
    total[3] += bo_abc.map(&:total_value).first.to_f
    total[4] += total_qty
    total[5] += total_nom
    total[6] += total_ongkir
    total[7] += total_ongkir + total_nom
  end
  (0..7).each do |ttl|
    totalnya << total[ttl]
  end
  sheet.add_row ["Total"] + totalnya, style: subjudul_biru_tengah, widths: [:ignore]
end